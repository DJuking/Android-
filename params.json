{"name":"Android-knowledge-share","tagline":"HandlerThread, Looper, Handler","body":"# HandlerThread+Looper+Handler\r\n\r\n## 应用场景\r\n本地；耗时（DB、IO、计算等）；顺序\r\n\r\n## 主要运用步骤\r\n### 准备工作\r\n    new HandlerThread(\"dataHandlerThread\");\r\n    dataHandlerThread.start(); // 必须在前，否则dataHandlerThread.getLooper()为null\r\n    new Handler(dataHandlerThread.getLooper()); // 不传入参数，相当于用getMainLooper()，占用主线程资源\r\n    handleMessage(Message msg);\r\n### 使用\r\n    dataHandler.sendEmptyMessage(DO_SOMETHING);\r\n### 释放资源\r\n    dataHandlerThread.quit();\r\n\r\n## 机制简析\r\nHandler（带消息队列），   接收消息；消息与任务对应\r\n\r\nHandlerThread，   带Looper的线程，任务实际执行的地方\r\n\r\nLooper，   Handler与HandlerThread之间桥梁，从Handler领任务到HandlerThread\r\n\r\n## 相似方案比较\r\n> Thread、Runnable   简单、易用\r\n> \r\n> AsyncTask   过程精细化；UI/后台线程\r\n> \r\n> HandlerThread+Looper+Handler   候命数据线程；比AsyncTask轻量级；顺序；高频；灵活组合\r\n\r\n## 扩展\r\n### 关于msg.what的int值\r\n> 写在ids.xml文件，然后以R.id.decode形式使用\r\n\r\n### Handler中消息控制\r\n> // 生成消息\r\n> \r\n> Handler#obtainMessage()\r\n> \r\n> // 延时发送\r\n> \r\n> Handler#sendEmptyMessageDelayed()\r\n> \r\n> Handler#sendMessageDelayed()\r\n> \r\n> // 插队\r\n> \r\n> Handler#sendMessageAtFrontOfQueue()\r\n> \r\n> // 移除\r\n> \r\n> Handler#removeMessages()\r\n\r\n### 独立文件书写\r\n> Thread、Handler\r\n\r\n## 补充材料\r\n《Android HandlerThread 完全解析》\r\n\r\n[http://blog.csdn.net/lmj623565791/article/details/47079737](http://blog.csdn.net/lmj623565791/article/details/47079737)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}